name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Add any required services here (Redis, PostgreSQL, etc.)
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
        echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
        echo "CLICKUP_API_TOKEN=${{ secrets.CLICKUP_API_TOKEN }}" >> $GITHUB_ENV
    
    - name: Start Flask app in background
      run: |
        python app.py &
        sleep 10  # Wait for app to start
    
    - name: Run quick tests
      run: |
        python test_runner.py quick
    
    - name: Run comprehensive tests
      run: |
        python test_runner.py comprehensive
    
    - name: Stop Flask app
      run: |
        pkill -f "python app.py" || true

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
    - name: Run post-deployment tests on staging
      run: |
        # Update test base_url to staging environment
        sed -i 's/localhost:5000/your-staging-url.com/g' test_comprehensive.py
        python test_runner.py post-deploy

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run post-deployment tests on production
      run: |
        # Update test base_url to production environment
        sed -i 's/localhost:5000/your-production-url.com/g' test_comprehensive.py
        python test_runner.py post-deploy